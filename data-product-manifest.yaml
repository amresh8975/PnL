version: 0.0.5
jobId: "1157"
jobName: PnL JPY Export Price
jobType: Source Aligned Data Product
domain: finance
alias: load_to_tgt
discoveryPort:
  name: PnL JPY Export Price
inputPorts:
  - alias: JPY_Price_1
    isDynamic: true
    path: /data/PnL/Output/Sales/JPY_Price/
    optional:
      persistDataFrame: false
      advanceOptions:
        delimiter: ","
      enableDataReconciliation: false
      enforceSchema: false
      connection: Finance On-Prem Connectivity
      dataSetUrn: urn:dv:dataset:a5500e8a-bea3-47a5-872f-cf9bbf00f21b
    type: inputDelimited
productState:
  isDynamic: true
  alias: load_to_tgt
  retentionVersions: ""
  logicalSchema: ""
  stateStoreType: loadDataIceberg
  isProfilingEnabled: false
  updateStrategy: Overwrite
  tableName: msil_dataverse_finance_catalog.export_jpy_price_monthly
  warehousePath: /data/iceberg_warehouse
  catalogName: postgres
  optional:
    persistDataFrame: false
    enableDataReconciliation: false
    enforceSchema: false
    enforceSchemaMethod: Warning
    catalogType: postgres
  refreshInterval: None
transformation:
  - isDynamic: true
    alias: Spark_SQL_1
    description: transform
    sequence: 2
    inputDataFrameList:
      - inputDataFrame: JPY_Price_1
        tempViewName: export_jpy_price
    query: with month_cte as(  select all_months.col1 as month_name, all_months.col2
      as month_seq  from (   select explode(array(("Apr", 1), ("May", 2),
      ("Jun", 3), ("Jul", 4), ("Aug", 5), ("Sep", 6), ("Oct", 7), ("Nov", 8),
      ("Dec", 9), ("Jan", 10), ("Feb", 11), ("Mar", 12))) as all_months   )
      months_tab  ), export_jpy_price_cte as(  select    model_code   ,
      upload_description   , continent   , country   , region   , state   ,
      city   , Group_Non_Group   , trade_type   , port   , currency   , year   ,
      cost   , capacity_cost_adj   , material_cost_adj   ,
      proposed_margin_rate   , case when initcap(trim(month)) in ('Apr',
      'April') then 'Apr'     when initcap(trim(month)) in ('May') then
      'May'    when initcap(trim(month)) in ('Jun', 'June') then 'Jun'     when
      initcap(trim(month)) in ('Jul', 'July') then 'Jul'     when
      initcap(trim(month)) in ('Aug', 'August') then 'Aug'     when
      initcap(trim(month)) in ('Sep', 'September') then 'Sep'     when
      initcap(trim(month)) in ('Oct', 'October') then 'Oct'     when
      initcap(trim(month)) in ('Nov', 'November') then 'Nov'     when
      initcap(trim(month)) in ('Dec', 'December') then 'Dec'     when
      initcap(trim(month)) in ('Jan', 'January') then 'Jan'     when
      initcap(trim(month)) in ('Feb', 'February') then 'Feb'     when
      initcap(trim(month)) in ('Mar', 'March') then 'Mar'     end as
      month  FROM   export_jpy_price  ), propagation_tab as (  select
      row_gen_months.model_code   , row_gen_months.upload_description   ,
      row_gen_months.month_name as month   , last_value(export_jpy_price.month,
      True) over (partition by row_gen_months.model_code,
      row_gen_months.upload_description order by row_gen_months.month_seq)
      proagation_month  from    ((select distinct model_code, upload_description
      from export_jpy_price_cte) as export_jpy_price   cross
      join    month_cte   ) row_gen_months   left join   export_jpy_price_cte
      export_jpy_price   on  export_jpy_price.model_code =
      row_gen_months.model_code    AND export_jpy_price.upload_description =
      row_gen_months.upload_description    AND export_jpy_price.month =
      row_gen_months.month_name  ) select   export_jpy_price.model_code  ,
      export_jpy_price.upload_description  , export_jpy_price.continent  ,
      export_jpy_price.country  , export_jpy_price.region  ,
      export_jpy_price.state  , export_jpy_price.city  ,
      export_jpy_price.Group_Non_Group  , export_jpy_price.trade_type  ,
      export_jpy_price.port  , export_jpy_price.currency  ,
      export_jpy_price.year  , export_jpy_price.cost  ,
      export_jpy_price.capacity_cost_adj  ,
      export_jpy_price.material_cost_adj  ,
      export_jpy_price.proposed_margin_rate  , propagation_tab.month
      from  export_jpy_price_cte as export_jpy_price inner join  propagation_tab
      ON export_jpy_price.model_code = propagation_tab.model_code  AND
      export_jpy_price.upload_description =
      propagation_tab.upload_description  AND export_jpy_price.month =
      propagation_tab.proagation_month
    optional:
      persistDataFrame: false
    type: operationThroughSqlQuery
controlPort:
  dataQualityRules: {}
outputPort:
  subscriptionChannels:
    - channelType: Postgres
      queryType: SQL
    - channelType: Dataproduct
      queryType: SQL
